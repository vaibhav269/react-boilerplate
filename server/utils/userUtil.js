var suid = require('rand-token').suid;
const User = require('../models/Users');
const UserSession = require('../models/UserSessions');

class UserUtil{
    static getUser(username){   //returns user details if username,user_email,user_phone is found otherwise false
        return User.findOne({$or:[{username:username},{user_email:username},{user_phone:username}],status:'a'}).exec()
        .then((count)=>{
            if(count){
                return {
                    success:true,
                    result:count
                }
            }else{
                return {
                    success:true,
                    result:false
                }
            }
        })
    }

    static isMobileUnique(mobile) {   //returns true if mobile is unique(i.e  doesn't exist in database) otherwise false
        return User.findOne({ user_phone: mobile,user_phone_verified:true }).exec()
            .then((count) => {
                if (!count) {
                    return {
                        success: true,
                        result: true
                    }
                } else {
                    return {
                        success: true,
                        result: false
                    }
                }
            })
    }

    static isEmailUnique(email) {   //returns true if email is unique(i.e  doesn't exist in database) otherwise false
        email = email.toLowerCase();
        return User.findOne({ user_email: email }).exec()
            .then((count) => {
                if (!count) {
                    return {
                        success: true,
                        result: true
                    }
                } else {
                    return {
                        success: true,
                        result: false,
                        email_status :count.user_email_verified
                    }
                }
            })
    }

    static setSession(username){
        let token = suid(16);

        return User.findOne({username:username}).exec()
            .then((user)=>{
                let userSession = new UserSession({userId:user.id,token:token});
                return userSession.save()
            })
            .then((resp)=>{
                return {
                    success:true,
                    token:token,
                    message:"session established"
                }
            })
    }

    static createNewUser(userData, email_verified = '', sendWelcomeDetails = true){
        delete userData._id;    //removing the _id field because that should be generated by mongo to be unique
        userData.user_email = userData.user_email.toLowerCase();
        if(email_verified){
            userData.user_email_verified = email_verified;
        }
        userData.user_phone_verified  = true;
        userData.status  = 'a';
        userData.date_added = new Date();
        if(!userData.added_by){
            userData.added_by = '99999';
        }
        const newUser = new User(userData);
        return newUser.save()
        .then((resp)=>{
            return{
                success:true,
                message:'Signup Successfull'
            }
        })

        //send welcome details

    }

    static async verifySession(token){
        try{
            let sql = `select id from user_sessions where token = '${token}'`;
            let result = await con.query(sql);
            if(result.length == 0){
                return {
                    success:true,
                    result:false
                };
            }else{
                return{
                    success:true,
                    result:true
                }
            }
        }catch(err){
            return{
                success:false,
                err:err
            }
        }
    }

    static async deleteSession(token){
        try{
            let sql = `delete from user_sessions where token = '${token}'`;
            let result = await con.query(sql);
            return{
                success:true
            }
        }catch(err){
            return{
                success:false,
                err:err
            }
        }
    }

    static async getProfile(token){
        try{
            let sql = `select users.id as user_id,name,gender,mobile,address,precise_address,lat,lng from users inner join user_sessions on users.id = user_sessions.userId where token = '${token}'`;
            let result = await con.query(sql);
            return {
                success: true,
                result: result[0]
            }
        } catch (err) {
            return {
                success: false,
                err: err
            }
        }
    }

}

module.exports = UserUtil;